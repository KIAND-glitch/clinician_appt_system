openapi: 3.0.0
info:
  title: Clinic Appointments API
  version: 1.0.0
  description: >
    REST API for a simplified clinic appointment system.
    - Times must be ISO-8601. Stored/returned in UTC.
    - Touching endpoints allowed (end == other.start is OK).
    - Past appointments creation is rejected.
servers:
  - url: http://localhost:3000

components:
  securitySchemes:
    RoleHeader:
      type: apiKey
      name: X-Role
      in: header
  schemas:
    Role:
      type: string
      enum: [patient, clinician, admin]
      example: patient

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          example: invalid input
        details:
          description: Optional validation details (e.g., Zod error)
          nullable: true
      required: [message]

    Appointment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        clinicianId:
          type: string
        patientId:
          type: string
        start:
          type: string
          format: date-time
          description: ISO date-time (UTC)
        end:
          type: string
          format: date-time
          description: ISO date-time (UTC)
        createdAt:
          type: string
          format: date-time
          description: ISO date-time (UTC)
      required: [id, clinicianId, patientId, start, end, createdAt]

    AppointmentCreate:
      type: object
      properties:
        clinicianId:
          type: string
        patientId:
          type: string
        start:
          type: string
          format: date-time
          description: Must be in the future; strictly before end
        end:
          type: string
          format: date-time
          description: Must be after start; touching allowed relative to other appts
      required: [clinicianId, patientId, start, end]

  parameters:
    FromQuery:
      in: query
      name: from
      schema:
        type: string
        format: date-time
      description: >
        Lower bound (inclusive). Defaults to **now** if omitted.
    ToQuery:
      in: query
      name: to
      schema:
        type: string
        format: date-time
      description: >
        Upper bound (exclusive or inclusive, depending on implementation).
        Must be after `from` when both provided.
    LimitQuery:
      in: query
      name: limit
      schema:
        type: integer
        minimum: 1
        maximum: 500
      required: false
      description: Optional page size.
    OffsetQuery:
      in: query
      name: offset
      schema:
        type: integer
        minimum: 0
      required: false
      description: Optional offset for pagination.
    RoleHeaderParam:
      in: header
      name: X-Role
      required: true
      schema:
        $ref: '#/components/schemas/Role'
      description: >
        Role simulation header. Allowed values depend on endpoint.
        (Alternatively, `?role=` query param may be supported by the server.)

paths:
  /appointments:
    get:
      summary: Admin — list upcoming appointments
      description: Requires admin role. Returns upcoming appointments, optionally filtered by date range.
      security:
        - RoleHeader: []
      parameters:
        - $ref: '#/components/parameters/RoleHeaderParam'
        - $ref: '#/components/parameters/FromQuery'
        - $ref: '#/components/parameters/ToQuery'
        - $ref: '#/components/parameters/LimitQuery'
        - $ref: '#/components/parameters/OffsetQuery'
      responses:
        '200':
          description: OK
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        '400':
          description: Invalid input (bad from/to or invalid role value)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (role missing or not admin)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    post:
      summary: Patient — create an appointment
      description: Requires patient role. Prevents overlapping appointments for the same clinician.
      security:
        - RoleHeader: []
      parameters:
        - $ref: '#/components/parameters/RoleHeaderParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppointmentCreate'
            examples:
              createExample:
                summary: Create 30-minute appointment
                value:
                  clinicianId: c1
                  patientId: p1
                  start: 2025-08-21T13:00:00+10:00
                  end: 2025-08-21T13:30:00+10:00
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
        '400':
          description: Invalid input (bad ISO, start>=end, past)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (role missing or not patient)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Overlap detected for clinician
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /clinicians/{id}/appointments:
    get:
      summary: Clinician — list upcoming appointments
      description: Requires clinician or admin role. Defaults to start >= now if `from` omitted.
      security:
        - RoleHeader: []
      parameters:
        - $ref: '#/components/parameters/RoleHeaderParam'
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: Clinician ID
        - $ref: '#/components/parameters/FromQuery'
        - $ref: '#/components/parameters/ToQuery'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
        '400':
          description: Invalid input (bad from/to or invalid role value)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden (role missing or not in [clinician, admin])
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
